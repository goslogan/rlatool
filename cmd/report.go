/*
Copyright Â© 2024 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	h "html/template"
	t "text/template"

	"github.com/goslogan/clusterinfo"
	"github.com/spf13/cobra"
)

// reportCmd represents the report command
var reportCmd = &cobra.Command{
	Use:   "report",
	Short: "Generate a report from the parsed input and one or more templaets",
	Long: `The template is passed the ClusterInfo struct generated by the parser
(see clusterinfo.go) as ".Info" and the title provided on the command line as 
".Title" . The template is executed and the result is output. 

See  https://pkg.go.dev/text/template for details. If the --html flag is passed
templates are processed by html/template instead`,
	RunE: func(cmd *cobra.Command, args []string) error {

		var err error
		asHTML, err := cmd.Flags().GetBool("html")
		if err != nil {
			return err
		}

		templateFiles, err := cmd.Flags().GetStringArray("templates")
		if err != nil {
			return err
		}

		title, err := cmd.Flags().GetString("title")
		if err != nil {
			return err
		}

		data := struct {
			Title  string
			Status *clusterinfo.ClusterInfo
		}{Title: title, Status: clusterInfo}

		if asHTML {
			tmpl, err := h.ParseFiles(templateFiles...)
			if err != nil {
				return err
			} else {
				return tmpl.Execute(cmd.OutOrStdout(), data)
			}
		} else {
			tmpl, err := t.ParseFiles(templateFiles...)
			if err != nil {
				return err
			} else {
				return tmpl.Execute(cmd.OutOrStdout(), data)
			}
		}
	},
}

func init() {
	rootCmd.AddCommand(reportCmd)
	reportCmd.Flags().BoolP("html", "H", false, "Set to true to use HTML template engine when processing templates")
	reportCmd.Flags().StringArrayP("templates", "t", []string{}, "List of templates to process, the first is assumed to be the root template")
	reportCmd.Flags().StringP("title", "T", "rlatool Report", "The title of the report if required")
	reportCmd.MarkFlagFilename("templates")
	reportCmd.MarkFlagRequired("templates")
}
